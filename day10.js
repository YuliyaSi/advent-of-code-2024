const teststring = '89010123\n' + '78121874\n' + '87430965\n' + '96549874\n' + '45678903\n' + '32019012\n' + '01329801\n' + '10456732';
const taskstring = '034565433432321821235456556798712438943432345432101010\n' + '125674344341210930012367349897601123876501656543238923\n' + '545981265210523841112398232098532014101665437654147014\n' + '436780378019654756501454101123442125012878328956056985\n' + '521091489328765661498760130210356916763969012347841076\n' + '342698456410644570187321221202197809854054521078932987\n' + '434784387569653089298435430143087612870123654169410673\n' + '525601295678762120387589347834561543965434783254321034\n' + '510567856789854871456678956921670123457650199165890321\n' + '654356943889903962345665067830589894398743278056785410\n' + '701245012958712653434784167845678765210634565410156789\n' + '898434321867012344321093254976104543231023876321943089\n' + '686321780154102101287765323987267650122012989423872176\n' + '567980691233283237898894015416398532143606788714565765\n' + '408974500543098946907623234505458545014545698601159854\n' + '312363217632127655416510107612369876105894332589018345\n' + '221457898565634562323421458733478983276701201478121230\n' + '100656967874567641032102369021098744589856782363210121\n' + '789345450923498634543001078112321654678345891054308701\n' + '654212321012654521694210981205430903543232654143489610\n' + '503403430156787610784300870376567812654121743267876523\n' + '012567567343898525695421889487854925780010893210965432\n' + '123498788210123436786438976598943056891234984921014101\n' + '019567699101898345877567887678762147878765675870123012\n' + '108754543210567212968900194589054038969454566767636323\n' + '205610121056750303453213293032123229454323879098545438\n' + '014981232347841219874984782143210110301012978121654569\n' + '123672654338932306705675676154560121212307665430743478\n' + '298543789221069455012310145069430430925408578989832387\n' + '567010176109178764563498232178521567876519454567601296\n' + '432123485458769853074567310123678106898323343218970345\n' + '012034394367458102189601489433439256765401252102181234\n' + '123465210210343012078732676512508349850106769843098321\n' + '054896990101212043896543216109612556743219856784587410\n' + '969887889654302158987894107898743445654340145697656531\n' + '878791078745983467856765545677654354567854234548545621\n' + '745622363215676500345653231987980123498960129639343210\n' + '034215454301876211256570120345678154323870038721658343\n' + '122100189321945308967981011234569067212721801290569012\n' + '543893276430932457898876323233432178008934980387378143\n' + '456764345567801966501895400145567889127645673456269654\n' + '369632105478765873432689312176876901234560012562158765\n' + '278543254309894569546576543089985432321071239873043210\n' + '103450569212723278637434010034394321810980548954560127\n' + '894321078112010198728922121165223010901289687643073438\n' + '765697151003434587017213033278112987874398796542189569\n' + '056788769876524326501304544569001056965834321233675678\n' + '145679458985015415432987693432102345216945610344569547\n' + '230989347034376102341056780540989104307898700123678632\n' + '321078234123289211652346791691071234487465410878766781\n' + '989165106000105690789905882782360943296578321969215690\n' + '076234245612234782349814943485456850123489100154304385\n' + '145210238763145671456723876596306765012101256701235276\n' + '234300149854078980365432101487217898721032349810120123';
const convertToArray = (stringMap) => stringMap.split('\n').map(str => str.split(''));
const testarray = convertToArray(teststring);
const taskarray = convertToArray(taskstring);

const directions = [
    [-1, 0],
    [0, 1],
    [1, 0],
    [0, -1]
];

const countTrailScore = (topographicMap) => {
    const arrOfStartPoints = topographicMap.reduce((sumArr, curArr, ind) => {
        if (curArr.includes('0')) {
            let start = 0;
            while (start < curArr.length && curArr.slice(start, curArr.length).includes('0')) {
                const indOfZero = curArr.slice(start, curArr.length).indexOf('0') + start;
                sumArr.push([ind, indOfZero]);
                start = indOfZero + 1;
            }
        }
        return sumArr;
    }, [])

    const traverseWay = (startPoint, value, visited) => {
        let score = 0;
        const [x, y] = startPoint;
        directions.forEach(([dx, dy]) => {
            const nx = x + dx;
            const ny = y + dy;
            if (
                nx >= 0 && ny >= 0 &&
                nx < topographicMap.length &&
                ny < topographicMap[0].length &&
                topographicMap[nx][ny] === String(value) &&
                !visited.has(`${nx},${ny}`)
            )
            {
                visited.add(`${nx},${ny}`);
                if (Number(value) === 9) {
                    score += 1;
                } else {
                    score += traverseWay([nx, ny], value + 1, visited);
                }
            }
        })

        return score;
    }

    return arrOfStartPoints
        .map(([x, y]) => {
            const visited = new Set();
            visited.add(`${x},${y}`);
            return traverseWay([x, y], 1, visited);
    })
        .reduce((a, b) => a + b, 0);
}

console.log(countTrailScore(testarray));
console.log(countTrailScore(taskarray));


